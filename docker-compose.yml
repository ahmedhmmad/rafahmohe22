version: '3'
services:

    php:
        build:
            args:
                user: syam
                uid: 1000
            context: .
            dockerfile: ./docker/Dockerfile
        volumes:
            - ./:/var/www/
            - $HOME/.composer/:$HOME/.composer/
        networks:
            - service-network

    nginx:
        image: nginx:latest
        container_name: web-server
        restart: unless-stopped
        tty: true
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./:/var/www
            - ./docker/nginx/conf.d:/etc/nginx/conf.d/
            - ./data/certbot/conf:/etc/letsencrypt
            - ./data/certbot/www:/var/www/certbot
        networks:
            - service-network
    #CertBot
    certbot:
        image: certbot/certbot
        volumes:
            - ./data/certbot/conf:/etc/letsencrypt
            - ./data/certbot/www:/var/www/certbot

    #MYSQL
    mysql:
        image: mariadb:10.5.8
        volumes:
            - mysqldata:/var/lib/mysql
        environment:
            - "MYSQL_ROOT_PASSWORD=${DB_PASSWORD}"
            - "MYSQL_DATABASE=${DB_DATABASE}"
            - "MYSQL_USER=${DB_USERNAME}"
            - "MYSQL_PASSWORD=${DB_PASSWORD}"
        ports:
            - "3306:3306"
        networks:
            - service-network
        env_file:
            - ./docker-compose.env

    phpmyadmin:
        image: phpmyadmin
        restart: always
        ports:
            - 8001:80
        environment:
            - PMA_ARBITRARY=1
            - PMA_HOST=mysql
        networks:
            - service-network
    redis:
        image: redis:4.0-alpine
        command: redis-server --appendonly yes
        ports:
            - "6379:6379"
        networks:
            - service-network

volumes:
    mysqldata:

networks:
    service-network:
        driver: bridge





#version: '3'
#services:
#
#    #Laravel App
#    app:
#        build:
#            args:
#                user: ahmed
#                uid: 1000
#            context: .
#            dockerfile: ./docker/Dockerfile
#        image: ahmedhmmad/rafahmoheweb
#        container_name: rafahmohewebapp
#        restart: unless-stopped
#        tty: true
#        environment:
#            SERVICE_NAME: app
#            SERVICE_TAGS: dev
#        working_dir: /var/www
#        volumes:
#            - ./:/var/www
#        networks:
#            - mynet
#
#    #Nginx Service
#    nginx:
#        image: nginx:alpine
#        container_name: nginx
#        restart: unless-stopped
#        tty: true
#        ports:
#            - "80:80"
#            - "443:443"
#        volumes:
#            - ./:/var/www
#            - ./nginx/conf.d/:/etc/nginx/conf.d/
#            - ./data/certbot/conf:/etc/letsencrypt
#            - ./data/certbot/www:/var/www/certbot
#        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
#        networks:
#            - mynet
#    certbot:
#        image: certbot/certbot
#        volumes:
#            - ./data/certbot/conf:/etc/letsencrypt
#            - ./data/certbot/www:/var/www/certbot
#        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
#    #MySQL Service
#    db:
#        image: mysql:5.7
#        container_name: db
#        restart: unless-stopped
#        tty: true
#        ports:
#            - "3306:3306"
#        environment:
#            MYSQL_DATABASE: rafahmohweb
#            MYSQL_USER: rafahmohe_admin
#            MYSQL_PASSWORD: admin@rafahmohe
#            MYSQL_ROOT_PASSWORD: admin@rafahmohe
#        volumes:
#            - mysqldata:/var/lib/mysql/
#        networks:
#            - mynet
#
##Docker Networks
#networks:
#    mynet:
#        driver: bridge
##Volumes
#volumes:
#    mysqldata:
#        driver: local

#version: "3.7"
#
#services:
#    app:
#        image: "laratest/app:${TAG:-latest}"
#        build:
#            args:
#                user: testusr
#                uid: 1000
#            context: ./
#            dockerfile: ./docker/Dockerfile
#        container_name: test-app
#        restart: unless-stopped
#        working_dir: /var/www/
#        volumes:
#            - ./:/var/www
#        networks:
#            - test-network
#
#    web:
#        image: "scout3030/web:${TAG:-latest}"
#        build:
#            context: ./
#            dockerfile: docker/nginx.dockerfile
#        container_name: test-nginx
#        restart: unless-stopped
#        ports:
#            - ${SERVER_PORT:-80}:80
#            - ${SERVER_PORT_SSL:-443}:443
#        volumes:
#            - ./:/var/www
#            - ./docker/nginx:/etc/nginx/conf.d/
#        networks:
#            - test-network
#
#    db:
#        image: mysql:5.7
#        container_name: test-db
#        restart: unless-stopped
#        ports:
#            - ${SERVER_PORT_DB:-3306}:3306
#        volumes:
#            - dbdata:/var/lib/mysql
#        environment:
#                    - "MYSQL_ROOT_PASSWORD=admin@rafahmohe"
#                    - "MYSQL_DATABASE=rafahmoheweb"
#                    - "MYSQL_USER=rafahmohe_admin"
#                    - "MYSQL_PASSWORD=admin@rafahmohe"
#        networks:
#            - test-network
#
#    phpmyadmin:
#        image: phpmyadmin
#        restart: always
#        ports:
#            - ${PHPMYADMIN_PORT_DB:-8080}:80
#        environment:
#            - PMA_ARBITRARY=1
#            - PMA_HOST=mysql
##            - PMA_USER=${DB_USERNAME:-homestead}
##            - PMA_PASSWORD=${DB_PASSWORD:-secret}
#        networks:
#            - test-network
#
#    mailhog:
#        image: mailhog/mailhog
#        logging:
#            driver: "none"
#        ports:
#            - ${MAIL_PORT:-1025}:1025
#            - ${MAILHOG_PORT:-8025}:8025
#        networks:
#            - test-network
#
#networks:
#    test-network:
#        driver: bridge
#
#volumes:
#    dbdata:


